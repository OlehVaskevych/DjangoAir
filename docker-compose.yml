services:
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: DjangoAir
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - backend

  stripe-listen:
    image: stripe/stripe-cli
    command: listen --forward-to http://nginx/api/succeed_payment/ --skip-verify
    depends_on:
      - web
      - nginx
    environment:
      STRIPE_API_KEY: sk_test_51RKHskQMzydK9SUpQXdCjoxpN6Dsq0acLCIdBqWECXIS6GRTKABCbevjZdHdAmPTT0JzuDiU89Zy52BxxJaOyPy300L1bau57i
    networks:
      - backend

  web:
    build: .
    command: daphne -b 0.0.0.0 -p 8000 DjangoAir.asgi:application
    ports:
      - "8000:8000"
    env_file:
      - DjangoAir/settings/.env
    environment:
      POSTGRES_HOST: db
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - backend

  worker:
    build: .
    command: celery -A air worker --loglevel=info --pool=solo
    env_file:
      - DjangoAir/settings/.env
    environment:
      POSTGRES_HOST: db
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - db
      - redis
      - web
    networks:
      - backend

  beat:
    build: .
    command: celery -A air beat --loglevel=info
    env_file:
      - DjangoAir/settings/.env
    environment:
      POSTGRES_HOST: db
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - db
      - redis
      - web
    networks:
      - backend

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/app/static:ro
    depends_on:
      - web
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
